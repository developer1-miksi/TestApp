definitions:
  env_vars: &env_vars
    FIREBASE_PROJECT_ID: your-firebase-project-id
    # BASE_ASSETS_URL: your-base-assets-url # This might not be needed if ASSETS_URL is fully specified per build
    # ASSETS_URL: "https://example.com/path/to/assets_${CLIENT_ID}.zip" # This should be set dynamically per build

workflows:
  ios-client-release:
    name: iOS client release
    instance_type: mac_mini_m1
    labels:
      - ${CLIENT_ID}
    environment:
      groups:
        - env_vars # Ensure this group includes CLIENT_ID and ASSETS_URL
      ios_signing:
        provisioning_profiles:
          - profile: profileTestApp
            # environment_variable: ~/Library/MobileDevice/Provisioning Profiles
        certificates:
          - certificate: appsiging
            # environment_variable: ~/Library/MobileDevice/Certificates
      vars:
        XCODE_SCHEME: "Runner"
        FIREBASE_TOKEN: your-firebase-ci-token
        APP_NAME: "Default App Name"
        BUNDLE_ID: "com.example.app"
    scripts:
      - name: Download and unpack client-specific assets
        script: |
          echo "Downloading assets from ${ASSETS_URL}"
          curl -o "assets_${CLIENT_ID}.zip" "${ASSETS_URL}" || echo "Failed to download assets_${CLIENT_ID}.zip"
          echo "Removing old assets and configuration files"
          rm -rf ./assets/
          unzip "assets_${CLIENT_ID}.zip" -d ./assets
          echo "Adjusting assets directory structure"
          mv ./assets/assets/* ./assets/
          rm -rf ./assets/assets

      - name: Update assets and configuration files
        script: |
          echo "Replacing Google services files"
          rm -f ./android/app/google-services.json
          rm -f ./ios/Runner/GoogleService-Info.plist
          cp ./assets/android/google-services.json ./android/app/
          cp ./assets/ios/GoogleService-Info.plist ./ios/Runner/
          cp ./assets/client/.env ./assets/

          flutter pub get
          flutter pub run flutter_launcher_icons

      - name: Change iOS app name
        script: |
          /usr/libexec/PlistBuddy -c "Set :CFBundleName $APP_NAME" -c "Set :CFBundleDisplayName $APP_NAME" ios/${XCODE_SCHEME}/Info.plist

      - name: Set bundle id
        script: |
          sed -i '' -e 's/PRODUCT_BUNDLE_IDENTIFIER \= [^\;]*\;/PRODUCT_BUNDLE_IDENTIFIER = '${BUNDLE_ID}';/' ios/${XCODE_SCHEME}.xcodeproj/project.pbxproj
          echo "Bundle ID set to: ${BUNDLE_ID}"

      - name: Install dependencies
        script: |
          flutter packages pub get

      - name: Set up code signing settings on Xcode project
        script: |
          xcode-project use-profiles

      - name: iOS code signing
        script: |
          keychain initialize
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
          keychain add-certificates
          xcode-project use-profiles

      - name: Flutter build ipa and automatic versioning
        script: |
          BUILD_NUMBER=$(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_ID") + 1))
          flutter build ipa --release \
          --build-name=1.0.$BUILD_NUMBER \
          --build-number=$BUILD_NUMBER\
          --export-options-plist=/Users/builder/export_options.plist

    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - test-results/flutter.json
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID

      email:
        recipients:
          - name@mail.com
